{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	 "Print to console": {
	 	"prefix": "log",
	 	"body": [
	 		"console.log('$1');",
	 		"$2"
	 	],
	 	"description": "Log output to console"
	 },

	"Main Function": {
		"prefix": "main",
		"body": [
			"auto main(int argc, char** argv) -> int {", 
			"\t",
			"\treturn 0;",
			"}"
		],
		"description": "main function"
	},

	"Struct Header": {
		"prefix": "struct_header",
		"body": [
			"#pragma once",
			"",
			"struct $1 {",
			"\t//Constructor",
			"\t$1();",
			"\t",
			"\t//Essentials: Destructor, Copy and Move Constructors, and Copy and Move Assignment Operators",
			"\t~$1();",
			"\t$1(const $1& other);",
			"\t$1($1&& other) noexcept;",
			"\t$1& operator=(const $1& other);",
			"\t$1& operator=($1&& other) noexcept;",
			"\t",
			"private:",
			"\t",
			"};"
		],
		"description": "struct header"
	},

	"Struct Source": {
		"prefix": "struct_source",
		"body": [
			"#include \".h\"",
			"",
			"//Constructor",
			"$1::$1()",
			": {",
			"\t",
			"}",
			"",
			"//Destructor",
			"$1::~$1() = default;",
			"",
			"//Copy Constructor",
			"$1::$1(const $1& other) = default;",
			"",
			"//Move Constructor",
			"$1::$1($1&& other) noexcept = default;",
			"",
			"//Copy Assignment Operator",
			"$1& $1::operator=(const $1& other) = default;",
			"",
			"//Move Assignment Operator",
			"$1& $1::operator=($1&& other) noexcept = default;"
		],
		"description": "struct source"
	},

	"Struct Interface": {
		"prefix": "struct_interface",
		"body": [
			"#pragma once",
			"",
			"//Interface",
			"struct $1 {",
			"\t//Constructor",
			"\t$1();",
			"\t",
			"\t//Destructor",
			"\tvirtual ~$1();",
			"\t",
			"\t//Interface methods",
			"\t",
			"\t",
			"protected:",
			"\t",
			"};"
		],
		"description": "struct interface"
	},

	"Struct Template": {
		"prefix": "struct_template",
		"body": [
			"#pragma once",
			"",
			"template <typename T>",
			"struct $1 {",
			"\t//Constructor",
			"\t$1() {",
			"\t",
			"\t}",
			"\t",
			"\t//Essentials: Destructor, Copy and Move Constructors, and Copy and Move Assignment Operators",
			"\t~$1() = default;",
			"\t$1(const $1& other) = default;",
			"\t$1($1&& other) noexcept = default;",
			"\t$1& operator=(const $1& other) = default;",
			"\t$1& operator=($1&& other) noexcept = default;",
			"\t",
			"private:",
			"\t",
			"};"
		],
		"description": "struct template"
	},

	"Getter Prototype": {
		"prefix": "getter_prototype",
		"body": [
			"//Getter for $1",
			"[[nodiscard]]",
			"auto get_$1() const -> const $2&;"
		],
		"description": "getter prototype",
	},

	"Getter Definition": {
		"prefix": "getter_definition",
		"body": [
			"//Getter for $1",
			"auto get_$1() const -> const $2& {",
			"\treturn this->$1;",
			"}"
		],
		"description": "getter definition",
	},

	"Setter Prototype": {
		"prefix": "setter_prototype",
		"body": [
			"//Setter for $1",
			"void set_$1($2 new_var);"
		],
		"description": "setter prototype",
	},

	"Setter Definition": {
		"prefix": "setter_definition",
		"body": [
			"//Setter for $1",
			"void set_$1($2 new_var) {",
			"\tthis->$1 = new_var;",
			"}"
		],
		"description": "setter definition",
	},
	
	"Include Cstdio" : {
		"prefix": "#cstdio",
		"body": "#include <cstdio>",
		"description": "include cstdio"
	},
	
	"Include Cstdlib" : {
		"prefix": "#cstdlib",
		"body": "#include <cstdlib>",
		"description": "include cstdlib"
	},

	"Include Cstddef" : {
		"prefix": "#cstddef",
		"body": "#include <cstddef>",
		"description": "include cstddef"
	},

	"Include Stdexcept" : {
		"prefix": "#stdexcept",
		"body": "#include <stdexcept>",
		"description": "include stdexcept"
	},

	"Include Iostream" : {
		"prefix": "#iostream",
		"body": "#include <iostream>",
		"description": "include iostream"
	},

	"Include String" : {
		"prefix": "#string",
		"body": "#include <string>",
		"description": "include string"
	},

	"Include Vector" : {
		"prefix": "#vector",
		"body": "#include <vector>",
		"description": "include vector"
	},

	"Include Array" : {
		"prefix": "#array",
		"body": "#include <array>",
		"description": "include array"
	},

	"Include Algorithm" : {
		"prefix": "#algorithm",
		"body": "#include algorithm>",
		"description": "include algorithm"
	},

	"Include Iterator" : {
		"prefix": "#iterator",
		"body": "#include <iterator>",
		"description": "include iterator"
	},

	"Include Span" : {
		"prefix": "#span",
		"body": "#include <span>",
		"description": "include span"
	},

	"Include String_view" : {
		"prefix": "#string_view",
		"body": "#include <string_view>",
		"description": "include string_view"
	},

	"Include Optional" : {
		"prefix": "#optional",
		"body": "#include <optional>",
		"description": "include optional"
	},

	"For Loop": {
		"prefix": "for",
		"body": [
			"for (size_t $1{}; $1 < $2; $1++) {",
			"\t",
			"}"
		],
		"description": "for loop"
	},

	"Ranged-Based For Loop": {
		"prefix": "forranged",
		"body": [
			"for ($1auto$2 $3 : $4) {",
			"\t",
			"}"
		],
		"description": "ranged-based for loop"
	},

	"Switch": {
		"prefix": "switch",
		"body": [
			"switch($1) {",
			"case $2: {",
			"\t",
			"} break;",
			"default: {",
			"\t",
			"} }"
		],
		"description": "switch"
	}
}
