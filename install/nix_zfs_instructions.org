
** Set DISK to be what drive your are using.
~# DISK=/dev/disk/by-id/...~

*** The following guide uses:
$DISK-part1 as the root partition
$DISK-part3 as the efi boot partition
$DISK-part4 as the swap partition
**** change these accordingly

* Partitions
** We create two partitions, one for boot and one for the zfs pool.

** Destroys your partition tables. Erases your entire disk.
~# sgdisk --zap-all $DISK~

** Creates a 512mb EFI boot partition.
~# sgdisk -n3:1M:+512M -t3:EF00 $DISK~
~# mkfs.vfat $DISK-part3~

** Swap partition
~# sgdisk -n4:-4G:0 -t4:8200 $DISK~
~# mkswap -L swap $DISK-part4~

** Creates a partition for the ZFS pool using the rest of the disk.
~# sgdisk -n1:0:0 -t1:BF01 $DISK~

** If creating an encrypted disk:
*** After creating the partitions:
~# cryptsetup luksFormat $DISK-part1~
*** Before creating the pool:
~# cryptsetup open --type luks $DISK-part1 crypt~

** Create the pool. If you want to tweak this a bit and you're feeling adventurous, you might try adding one or more of the following additional options:
*** To disable writing access times:
  ~-O atime=off~
*** To enable filesystem compression:
  ~-O compression=lz4~
*** To improve performance of certain extended attributes:
  ~-O xattr=sa~
*** For systemd-journald posixacls are required
  ~-O  acltype=posixacl ~
*** To specify that your drive uses 4K sectors instead of relying on the size reported by the hardware (note small 'o'):
  ~-o ashift=12~

** The 'mountpoint=none' option disables ZFS's automount machinery; we'll use the normal fstab-based mounting machinery in Linux.
** '-R /mnt' is not a persistent property of the FS, it'll just be used while we're installing.

** Default:
~# zpool create -O mountpoint=none rpool $DISK-part1~
** With Options:
~# zpool create -O mountpoint=none -O atime=off -O compression=lz4 -O xattr=sa -O acltype=posixacl -o ashift=12 -R /mnt rpool $DISK-part1~
** If encrypting disk:
~# zpool create -O mountpoint=none -O atime=off -O compression=lz4 -O xattr=sa -O acltype=posixacl -o ashift=12 -R /mnt rpool /dev/mapper/crypt~
*** with Modern SSD use ashift=13

* Opting Out with ZFS
** Before you can opt in, you must opt out of saving data by default.

** Root dataset:
~# zfs create -p -o mountpoint=legacy rpool/local/root~

** Before mounting it, create a snapshot while it is totally blank:
~# zfs snapshot rpool/local/root@blank~

** And then mount it:
~# mount -t zfs rpool/local/root /mnt~

** Then mount the partition created for the /boot:
~# mkdir /mnt/boot~
~# mount $DISK-part3 /mnt/boot~

** Mount the swap partition
~# swapon $DISK-part4~

** Create and mount a dataset for /nix:
~# zfs create -p -o mountpoint=legacy rpool/local/nix~
~# mkdir /mnt/nix~
~# mount -t zfs rpool/local/nix /mnt/nix~

** And a dataset for /home:
~# zfs create -p -o mountpoint=legacy rpool/safe/home~
~# mkdir /mnt/home~
~# mount -t zfs rpool/safe/home /mnt/home~

** And finally, a dataset explicitly for state to persist between boots:
~# zfs create -p -o mountpoint=legacy rpool/safe/persist~
~# mkdir /mnt/persist~
~# mount -t zfs rpool/safe/persist /mnt/persist~
*** Note: in my systems, datasets under rpool/local are never backed up, and datasets under rpool/safe are.
    
* NixOS ZFS Configuration
** Generate the NixOS configuration, as per the NixOS manual.
~# nixos-generate-config --root /mnt~

** Edit /mnt/etc/nixos/configuration.nix and add the following line:
#+begin_src nix
boot.supportedFilesystems = [ "zfs" ];
#+end_src

** Also, make sure you set the networking.hostId option, which ZFS requires:
#+begin_src nix
networking.hostId = "<random 8-digit hex string>";
#+end_src
*** See https://nixos.org/nixos/manual/options.html#opt-networking.hostId for more.
*** To generate a random unique id:
~$ head -c 8 /etc/machine-id~
  
** Add the following line to configuration.nix which rollbacks to the blank snapshot after devices are made avaliable to erase the root dataset on each boot.
#+begin_src nix  
boot.initrd.postDeviceCommands = lib.mkAfter ''
    zfs rollback -r rpool/local/root@blank
  '';
#+end_src
  
** To enable support for the latest kernel:
#+begin_src nix
  boot.zfs.enableUnstable = true;
#+end_src
  
** To pervent errors when /nix becomes extremely large:
#+begin_src nix
  boot.loader.grub.copyKernels = true;
#+end_src
  
** To prevent zfs corruption:
#+begin_src nix
boot.kernelParams = [ "nohibernate" ];
#+end_src
  
** If your disk is partitioned beyond a boot partition, it's wise to add
#+begin_src nix
boot.kernelParams = [ "elevator=none" ];
#+end_src
  
** If using an encrypted disk add:
#+begin_src nix
boot.loader.grub = {
  version = 2;
  enableCryptodisk = true;
};
boot.initrd.luks.devices = {
  root = {
    device = "/dev/disk/by-uuid/partition-part1";
    preLVM = true;
  };
};
#+end_src
  
* User Account Creation Fix
** Generate a hashed password for your user and root
$ mkpasswd -m sha-512

** Create separate files for your user and root hashed passwords
*** each file should only contain the hashed password on one line
~# mkdir /mnt/persist/secrets~
~# echo ROOT_HASHED_PASSWORD > /mnt/persist/secrets/root~
~# echo USER_HASHED_PASSWORD > /mnt/persist/secrets/<name>~
*** To fix persist being mounted after user creation
*** To ensure /persist is mounted before user creation
#+begin_src nix
fileSystems."/persist".neededForBoot = true;
#+end_src

*** To make passwords declarative with sops
#+begin_src nix
users.mutableUsers = false;
user.user.root.passwordFile = "/persist/secrets/root";
user.user.<name>.passwordFile = "/persist/secrets/<name>";
user.user.<name>.createHome = true;
user.user.<name>.home = "/home/<name>";
#+end_src

* Opting In
** To fix the "erase on every boot" networking problems:
*** Create a directory under /persist, mirroring the /etc structure:
~# mkdir -p /mnt/persist/etc/NetworkManager/system-connections~

*** And use Nixâ€™s etc module to set up the symlink:
#+begin_src nix
environment.etc."NetworkManager/system-connections".source = "/persist/etc/NetworkManager/system-connections/";
#+end_src
  
** To fix no configuration file:
~# cp -r /mnt/etc/nixos /mnt/persist/etc~
*** Add the following line to configuration.nix
#+begin_src nix
environment.etc."nixos".source = "/persist/etc/nixos/";
#+end_src

** To fix postgres deletion problems:
~# mkdir /persist/postgresql~
~# chown postgres /persist/postgresql~
Then make the postgres ~dataDir~ to ~/persist/postgresql/data~

* Finish the Installation
** Tip to make sure that your network interfaces are the correct ones.
  
** Finish the installation.
~# nixos-install~

*** You can install from a flake with either:
~nixos-install --impure --flake /path/to/flake#hostName~
or
~nixos-install --flake <github url>~

** Reboot.
